{"version":3,"sources":["components/u1-search-by-word/SearchByWord.module.css","components/u2-search-by-length-word/SearchByLengthWord.module.css","api/wordsApi.ts","redux/wordsReducer.ts","redux/wordsSelector.ts","components/u0-common/button.tsx","components/u0-common/Input.tsx","components/u1-search-by-word/SearchByWord.tsx","components/u2-search-by-length-word/SearchByLengthWord.tsx","components/App.tsx","serviceWorker.ts","redux/store.ts","index.tsx","components/App.module.css"],"names":["module","exports","wordsApi","axios","get","then","res","data","initialState","words","wordSearch","isCaseSensitive","minLengthWord","action","type","payload","getWordSearch","createSelector","state","wordsReducer","filter","word","length","currentWord","toLowerCase","search","includes","Button","React","memo","title","Input","checked","value","onChange","placeholder","SearchByWord","dispatch","useDispatch","useState","minWordLength","setMinWordLength","onSubmit","e","preventDefault","className","style","item","currentTarget","SearchByLengthWord","useSelector","setWordSearch","App","useEffect","a","console","log","alert","app","container","map","index","key","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b334f332.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"SearchByWord_item__2XAkw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"SearchByLengthWord_item__15Uqs\"};","import axios from 'axios';\r\n\r\n\r\n\r\nexport const wordsApi = {\r\n    getWords() {\r\n        return axios.get<any>(\r\n            'https://server-4-mrsoft.herokuapp.com/'\r\n            // 'https://cors-anywhere.herokuapp.com/mrsoft.by/data.json'\r\n        ).then(res => res.data.data)\r\n\r\n    }\r\n\r\n}","import {InferActionTypes, AppStateType} from './store';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {Dispatch} from 'redux';\r\nimport {wordsApi} from '../api/wordsApi';\r\n\r\nconst SET_WORDS = 'SET_WORDS';\r\nconst SET_WORD_SEARCH = 'SET_WORD_SEARCH';\r\nconst SET_MIN_LENGTH_WORD = 'SET_MIN_LENGTH_WORD';\r\nconst SET_IS_CASE_SENSITIVE = 'SET_IS_CASE_SENSITIVE';\r\n\r\nconst initialState = {\r\n    words: [] as Array<string>,\r\n    wordSearch: '',\r\n    isCaseSensitive: false,\r\n    minLengthWord: ''\r\n};\r\n\r\n\r\nexport const wordsReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_WORDS:\r\n        case SET_WORD_SEARCH:\r\n        case SET_MIN_LENGTH_WORD:\r\n            return {...state, ...action.payload}\r\n        case SET_IS_CASE_SENSITIVE:\r\n            return {...state, isCaseSensitive: !state.isCaseSensitive}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const action = {\r\n\r\n    wordsReceived: (words:Array<string>) => ({\r\n        type: SET_WORDS,\r\n        payload: {words}\r\n    }as const),\r\n    wordSearchReceived: (wordSearch:string) => ({\r\n        type: SET_WORD_SEARCH,\r\n        payload: {wordSearch}\r\n    }as const),\r\n    minLengthWordReceived: (minLengthWord: string ) => ({\r\n        type: SET_MIN_LENGTH_WORD,\r\n        payload: {minLengthWord}\r\n    }as const),\r\n    isCaseSensitiveReceived: () => ({\r\n        type: SET_IS_CASE_SENSITIVE\r\n    }as const),\r\n}\r\n\r\nexport const getWords = (): ThunkType => async (dispatch: Dispatch) => {\r\n    try {\r\n        const res = await wordsApi.getWords()\r\n        console.log(res)\r\n        dispatch(action.wordsReceived(res))\r\n    } catch (e) {\r\n        alert('error')\r\n    }\r\n}\r\n\r\n\r\n//Types\r\ntype ActionTypes = InferActionTypes<typeof action>\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionTypes>\r\nexport type InitialStateType = typeof initialState","import {createSelector, Selector} from 'reselect';\r\nimport {AppStateType} from './store';\r\n\r\n\r\nexport const getWordSearch: Selector<AppStateType, Array<string>> = createSelector(\r\n    state => state.wordsReducer.words,\r\n    state => state.wordsReducer.wordSearch,\r\n    state => state.wordsReducer.minLengthWord,\r\n    state => state.wordsReducer.isCaseSensitive,\r\n    (words: Array<string>, wordSearch, minLengthWord, isCaseSensitive) => {\r\n        return words\r\n            .filter(word => !minLengthWord || word.length > +minLengthWord)\r\n            .filter(currentWord => {\r\n                const word = isCaseSensitive ? currentWord : currentWord.toLowerCase()\r\n                const search = isCaseSensitive ? wordSearch : wordSearch.toLowerCase()\r\n\r\n                return word.includes(search)\r\n            })\r\n    })\r\n\r\n","import React from 'react';\r\n\r\ntype ButtonType = {\r\n    title: string\r\n\r\n}\r\n\r\nconst Button: React.FC<ButtonType> = React.memo(({title}) => {\r\n    return (\r\n        <button type='submit'>{title}</button>\r\n    )\r\n})\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\ntype InputType = {\r\n    onChange: (e:React.ChangeEvent<HTMLInputElement>) => void\r\n    placeholder?: string\r\n    type: string\r\n    value?: string\r\n    checked?: boolean\r\n}\r\n\r\nconst Input: React.FC<InputType> = React.memo(({type, checked, value, onChange, placeholder}) => {\r\n    return (\r\n        <input\r\n            value={value}\r\n            onChange={onChange}\r\n            placeholder={placeholder}\r\n            type={type}\r\n            checked={checked}\r\n        />\r\n    )\r\n})\r\n\r\nexport default Input;\r\n","import React, {useState} from 'react';\r\nimport style from './SearchByWord.module.css';\r\nimport {useDispatch} from 'react-redux';\r\nimport {action} from '../../redux/wordsReducer';\r\nimport Button from '../u0-common/button';\r\nimport Input from '../u0-common/Input';\r\n\r\n\r\nconst SearchByWord = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [minWordLength, setMinWordLength] = useState('')\r\n\r\n    const findWordByLengthWord = (e:React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        dispatch(action.minLengthWordReceived(minWordLength))\r\n    }\r\n\r\n    const handleMinWordLengthChange = (e:React.ChangeEvent<HTMLInputElement>) => setMinWordLength(e.currentTarget.value)\r\n\r\n    return (\r\n        <form onSubmit={findWordByLengthWord} className={style.item}>\r\n            <Input value={minWordLength} onChange={handleMinWordLengthChange} placeholder='Enter length' type='number'/>\r\n            <Button title='Search by length word'/>\r\n        </form>\r\n    )\r\n})\r\n\r\nexport default SearchByWord;\r\n","import React, {useState} from 'react';\r\nimport style from './SearchByLengthWord.module.css';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {action} from '../../redux/wordsReducer';\r\nimport Btn from '../u0-common/button';\r\nimport Input from '../u0-common/Input';\r\nimport {AppStateType} from '../../redux/store';\r\n\r\n\r\nconst SearchByLengthWord = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isCaseSensitive = useSelector((state: AppStateType) => state.wordsReducer.isCaseSensitive)\r\n    const [wordSearch, setWordSearch] = useState('')\r\n\r\n    const findByWord = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        dispatch(action.wordSearchReceived(wordSearch))\r\n    }\r\n\r\n    const handleIsCaseSensitiveChange = () => dispatch(action.isCaseSensitiveReceived())\r\n    const handleWordSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => setWordSearch(e.currentTarget.value)\r\n\r\n    return (\r\n        <form onSubmit={findByWord} className={style.item}>\r\n            <Input value={wordSearch} onChange={handleWordSearchChange} placeholder='Enter word' type='text'/>\r\n            <Input onChange={handleIsCaseSensitiveChange} checked={isCaseSensitive} type='checkbox'/>\r\n            <Btn title='Search by word'/>\r\n        </form>\r\n    )\r\n})\r\n\r\nexport default SearchByLengthWord;\r\n","import React, {useEffect} from 'react';\nimport style from './App.module.css';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {getWords} from '../redux/wordsReducer';\nimport {getWordSearch} from '../redux/wordsSelector';\nimport SearchByWord from './u1-search-by-word/SearchByWord';\nimport SearchByLengthWord from './u2-search-by-length-word/SearchByLengthWord';\n\nfunction App() {\n\n    const dispatch = useDispatch()\n\n    const words: Array<string> = useSelector(getWordSearch)\n\n    useEffect(() => {\n        dispatch(getWords())\n    }, [dispatch])\n\n    return (\n        <div className={style.app}>\n            <div className={style.container}>\n                <SearchByWord/>\n                <SearchByLengthWord/>\n            </div>\n            {words.map((word: string, index: any) => <p key={index}>{word}</p>)}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport { wordsReducer } from './wordsReducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    wordsReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never","import React from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nrender(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__A23MU\",\"container\":\"App_container__3VuS5\",\"item\":\"App_item__Twjsa\"};"],"sourceRoot":""}